# Generated by Django 3.2.10 on 2022-02-04 08:44

import django.core.validators
from django.db import migrations, models
import django.db.models.expressions


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.CharField(max_length=100, unique=True)),
                ('extra_patient_info', models.CharField(blank=True, max_length=400)),
                ('other_diagnosis', models.CharField(blank=True, max_length=100)),
                ('chronic_illnesses', models.CharField(blank=True, max_length=100)),
                ('other_medication', models.CharField(blank=True, max_length=100)),
                ('cancer_in_family', models.CharField(blank=True, max_length=100)),
                ('cud_histology', models.CharField(choices=[('HGSOC', 'High grade serous ovarian cancer'), ('MUCINOUS', 'Mucinous ovarian cancer'), ('ENDOMETRIOID', 'Endometrioid')], max_length=20)),
                ('disease_origin', models.CharField(blank=True, choices=[('OVARY', 'Ovary'), ('OMENTUM', 'Omentum'), ('PERITONEUM', 'Peritoneum'), ('LYMPHNODE', 'lymph node'), ('MESOTHELIUM', 'Mesothelium'), ('ASCITES', 'Ascites')], max_length=20)),
                ('cud_stage', models.CharField(choices=[('IA', 'Ia'), ('IB', 'Ib'), ('IC1', 'Ic1'), ('IC2', 'Ic2'), ('IC3', 'Ic3'), ('IIA', 'Iia'), ('IIB', 'Iib'), ('IIIA1i', 'Iiia1I'), ('IIIA1ii', 'Iiia1Ii'), ('IIIA2', 'Iiia2'), ('IIIB', 'Iiib'), ('IIIC', 'Iiic'), ('IVA', 'Iva'), ('IVB', 'Ivb')], max_length=20)),
                ('cud_primary_therapy_outcome', models.CharField(blank=True, choices=[('PARTIAL', 'Partial response'), ('COMPLETE', 'Complete response'), ('PROGRESSIVE', 'Progressive disease'), ('DEATH', 'Death during therapy'), ('STOPPED', 'Stopped'), ('SIDEEFFECTSTOP', 'Stopped due to side effects'), ('UNKNOWN', 'Unknown response')], max_length=20)),
                ('cud_survival', models.CharField(choices=[('DEATHUNKNOWN', 'Death due to unknown reason'), ('DEATHCANCER', 'Death due to cancer'), ('ALIVE', 'Alive')], max_length=20)),
                ('cud_treatment_strategy', models.CharField(choices=[('NACT', 'Neo-adjuvant chemotherapy'), ('PDS', 'Primary debulking surgery')], max_length=20)),
                ('cud_current_treatment_phase', models.CharField(choices=[('PROGRESSION', 'Progression'), ('FOLLOWUP', 'Follow.-up'), ('PRIMARYCHEMO', 'Primary chemotherapy'), ('DRUGTRIAL', 'Drug trial'), ('HORMONAL', 'Hormonal treatment')], max_length=20)),
                ('maintenance_therapy', models.CharField(choices=[('NOMAINTENANCE', 'No maintenance therapy'), ('BEVACIZUMAB', 'Bevacizumab'), ('PARPI', 'PARP inhibition therapy')], max_length=25)),
                ('cud_stage_info', models.CharField(blank=True, max_length=200)),
                ('progression_detection_method', models.CharField(blank=True, max_length=100)),
                ('primary_chemo_cycles', models.PositiveIntegerField(null=True)),
                ('nact_cycles', models.PositiveIntegerField(null=True)),
                ('post_ids_cycles', models.PositiveIntegerField(null=True)),
                ('cud_time_of_diagnosis', models.DateTimeField(blank=True, null=True)),
                ('primary_operation_date', models.DateTimeField(blank=True, null=True)),
                ('primary_laprascopy_date', models.DateTimeField(blank=True, null=True)),
                ('secondary_operation_date', models.DateTimeField(blank=True, null=True)),
                ('last_followup_visit', models.DateTimeField(blank=True, null=True)),
                ('next_followup_visit', models.DateTimeField(blank=True, null=True)),
                ('cud_progression_date', models.DateTimeField(blank=True, null=True)),
                ('cud_last_primary_chemo', models.DateTimeField(blank=True, null=True)),
                ('cud_date_of_outcome', models.DateTimeField(blank=True, null=True)),
                ('cud_date_of_death', models.DateTimeField(blank=True, null=True)),
                ('maintenance_therapy_end', models.DateTimeField(blank=True, null=True)),
                ('response_ct_date', models.DateTimeField(blank=True, null=True)),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(150)])),
                ('height', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(250)])),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(300.0)])),
                ('has_response_ct', models.BooleanField(default=False)),
                ('has_ctdna', models.BooleanField(default=False)),
                ('has_petct', models.BooleanField(default=False)),
                ('has_wgs', models.BooleanField(default=False)),
                ('has_singlecell', models.BooleanField(default=False)),
                ('has_germline_control', models.BooleanField(default=False)),
                ('has_paired_freshsample', models.BooleanField(default=False)),
                ('has_brca_mutation', models.BooleanField(default=False)),
                ('has_hrd', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('primary_laprascopy_date__lt', django.db.models.expressions.F('cud_time_of_diagnosis'))), name='lapra-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('cud_time_of_diagnosis__lt', django.db.models.expressions.F('primary_operation_date'))), name='diagnosis-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('primary_operation_date__lt', django.db.models.expressions.F('cud_last_primary_chemo'))), name='operation-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('primary_operation_date__lt', django.db.models.expressions.F('secondary_operation_date'))), name='operation-constraint2'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('primary_operation_date__lt', django.db.models.expressions.F('last_followup_visit'))), name='followup-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('last_followup_visit__lt', django.db.models.expressions.F('next_followup_visit'))), name='followup-constraint2'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('cud_last_primary_chemo__lt', django.db.models.expressions.F('maintenance_therapy_end'))), name='maintenance-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('maintenance_therapy_end__lt', django.db.models.expressions.F('cud_progression_date'))), name='progression-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('cud_progression_date__lt', django.db.models.expressions.F('cud_date_of_death'))), name='outcome-constraint1'),
        ),
        migrations.AddConstraint(
            model_name='clinicaldata',
            constraint=models.CheckConstraint(check=models.Q(('cud_date_of_outcome__lt', django.db.models.expressions.F('cud_date_of_death'))), name='outcome-constraint2'),
        ),
    ]
